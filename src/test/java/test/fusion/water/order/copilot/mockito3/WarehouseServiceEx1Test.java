/**
 * Copyright (c) 2024 Araf Karsh Hamid
 * <p>
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * <p>
 * This program and the accompanying materials are dual-licensed under
 * either the terms of the Eclipse Public License v1.0 as published by
 * the Eclipse Foundation
 * <p>
 * or (per the licensee's choosing)
 * <p>
 * under the terms of the Apache 2 License version 2.0
 * as published by the Apache Software Foundation.
 */
package test.fusion.water.order.copilot.mockito3;

import io.fusion.water.order.adapters.service.WarehouseServiceImpl;
import io.fusion.water.order.domain.models.OrderEntity;
import io.fusion.water.order.domain.models.OrderStatus;
import io.fusion.water.order.domain.services.PackingService;
import io.fusion.water.order.domain.services.ShippingService;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import test.fusion.water.order.utils.OrderMock;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

/**
 * ms-test-quickstart / WarehouseServiceEx2Test
 * Code Autogenerated by GitHub CoPilot
 * Prompt:
 * /tests WarehouseServiceImpl
 *
 * @author: CoPilot, Araf Karsh Hamid
 * @version: 0.1
 * @date: 2024-12-24T1:01 AM
 */
@ExtendWith(MockitoExtension.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(OrderAnnotation.class)
class WarehouseServiceEx1Test {

    @Mock
    private PackingService packingService;

    @Mock
    private ShippingService shippingService;

    @InjectMocks
    private WarehouseServiceImpl warehouseService;

    @Test
    @DisplayName("Process Orders - All Orders Packed")
    @Order(1)
    @Tag("critical")
    void processOrdersAllPacked() {
        // Updated Autogenerated Code
        // Changed PackedOrders to OrderInTransit
        List<OrderEntity> packedOrders = createOrderInTransit();
        when(packingService.packOrders(packedOrders)).thenReturn(packedOrders);
        when(shippingService.shipOrder(packedOrders)).thenReturn(packedOrders);

        List<OrderEntity> processedOrders = warehouseService.processOrders(packedOrders);

        for (OrderEntity order : processedOrders) {
            assertEquals(OrderStatus.IN_TRANSIT, order.getOrderStatus());
        }
    }

    @Test
    @DisplayName("Process Orders - Some Orders Packed")
    @Order(2)
    @Tag("critical")
    void processOrdersSomePacked() {
        List<OrderEntity> mixedOrders = createMixedOrders();
        when(packingService.packOrders(mixedOrders)).thenReturn(mixedOrders);
        when(shippingService.shipOrder(mixedOrders)).thenReturn(mixedOrders);

        List<OrderEntity> processedOrders = warehouseService.processOrders(mixedOrders);

        for (OrderEntity order : processedOrders) {
            if (order.getOrderStatus() == OrderStatus.PREPARING) {
                assertEquals(OrderStatus.PREPARING, order.getOrderStatus());
            } else {
                assertEquals(OrderStatus.IN_TRANSIT, order.getOrderStatus());
            }
        }
    }

    @Test
    @DisplayName("Process Orders - All Orders Preparing")
    @Order(3)
    @Tag("critical")
    void processOrdersAllPreparing() {
        List<OrderEntity> preparingOrders = createPreparingOrders();
        when(packingService.packOrders(preparingOrders)).thenReturn(preparingOrders);
        when(shippingService.shipOrder(preparingOrders)).thenReturn(preparingOrders);

        List<OrderEntity> processedOrders = warehouseService.processOrders(preparingOrders);

        for (OrderEntity order : processedOrders) {
            assertEquals(OrderStatus.PREPARING, order.getOrderStatus());
        }
    }

    /**
     * Create Order In Transit
     * Removed createPackedOrders() from auto generated code
     * Added createOrderInTransit()
     * @return
     */
    private List<OrderEntity> createOrderInTransit() {
        return OrderMock.createOrderInTransit(OrderMock.createOrder());
    }

    /**
     * Create Mixed Orders
     * As there are no setOrderStatus() method in OrderEntity
     * Replaced it with appropriate methods
     * - orderInTransit()
     * - orderIsGettingPrepared()
     * @return
     */
    private List<OrderEntity> createMixedOrders() {
        List<OrderEntity> orderList = createOrder();
        orderList.get(0).orderInTransit();
        orderList.get(1).orderIsGettingPrepared();
        return orderList;
    }

    /**
     * Create Preparing Orders
     * As there are no setOrderStatus() method in OrderEntity
     * Updated it with appropriate methods
     * @return
     */
    private List<OrderEntity> createPreparingOrders() {
        List<OrderEntity> orderList = createOrder();
        for (OrderEntity order : orderList) {
            order.orderIsGettingPrepared();
        }
        return orderList;
    }

    /**
     * Create Order List
     * This method was mentioned in the auto generated code
     * @return
     */
    public List<OrderEntity> createOrder() {
        return OrderMock.createOrder();
    }

}
